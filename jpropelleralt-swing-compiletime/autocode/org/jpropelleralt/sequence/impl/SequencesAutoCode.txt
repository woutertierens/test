	/**
	 * A {@link Sequence} of {@link NUMBER_TYPE}s, incrementing and
	 * decrementing by a fixed step.  
	 */
	public static class NUMBER_TYPEStepSequence implements Sequence<NUMBER_TYPE>{
		private final NUMBER_TYPE step;
		
		/**
		 * Create a new {@link NUMBER_TYPEStepSequence}
		 * @param step	The increment/decrement size
		 */
		public NUMBER_TYPEStepSequence(NUMBER_TYPE step) {
			this.step = step;
		}
		
		@Override
		public NUMBER_TYPE next(NUMBER_TYPE t) {
			return t + step;
		}
		@Override
		public NUMBER_TYPE previous(NUMBER_TYPE t) {
			return t - step;
		}
	}
	
	/**
	 * Make a new {@link NUMBER_TYPEStepSequence}, with specified step
	 * @param step		The fixed step
	 * @return			A new {@link NUMBER_TYPEStepSequence}
	 */
	public static NUMBER_TYPEStepSequence stepSequence(NUMBER_TYPE step) {
		return new NUMBER_TYPEStepSequence(step);
	}